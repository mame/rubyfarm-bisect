#!/usr/bin/env ruby

require "tmpdir"
require "optparse"
require "open3"

Version = "1.1.3"

FIRST_COMMIT = "7c1b30a602ab109d8d5388d7dfb3c5b180ba24e1" # r57410
ORIGINAL_GIT_PATH = "https://github.com/ruby/ruby.git"
CORE = File.join(__dir__, "rubyfarm-bisect-core")

good_commit = FIRST_COMMIT
bad_commit = "master"
git_url = ORIGINAL_GIT_PATH
mounts = []
auto = true

opt = OptionParser.new
opt.on("-u URL", "--git-url URL", "URL of git repository (defalut: #{ ORIGINAL_GIT_PATH })") {|v| git_url = v }
opt.on("-g COMMIT", "--good-commit COMMIT", "good commit (defalut: #{ FIRST_COMMIT })") {|v| good_commit = v }
opt.on("-b COMMIT", "--bad-commit COMMIT", "bad commit (defalut: master)") {|v| bad_commit = v }
opt.on("-m PATH", "--mount-volume PATH", "mount PATH to /root (default: none)") {|v| mounts << v }
opt.on("-t", "--test-rb", "run test.rb") do
  mounts = ["test.rb"]
  ARGV.concat(["ruby", "/root/test.rb"])
end
opt.on("--no-auto", "disable automatic detection of the order (good->bad or bad->good)") { auto = false }
opt.on("")
opt.on("Example: #{ File.basename($0) } -u /path/to/ruby/working-copy ruby -e 'some code'")
opt.banner += " COMMAND"
opt.order!(ARGV)

docker_exe = ["docker", "podman"].find do |exe|
  system("command", "-v", exe, out: File::NULL)
end

unless docker_exe
  puts "Neither docker nor podman are in PATH"
  exit(1)
end

ENV["RUBYFARM_BISECT_DOCKER_EXE"] = docker_exe

mounts = mounts.flat_map do |path|
  path = File.expand_path(path)
  bind = nil
  if File.directory?(path)
    bind = "#{ path }:/root"
  else
    bind = "#{ path }:/root/#{ File.basename(path) }"
  end
  ["-v", bind + ":ro"]
end

solve_rev = -> commit do
  case commit
  when /\Ar(\d+)\z/
    id = "git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@#$1"
    commits, = Open3.capture2("git", "log", "--grep", id, "--format=format:%H")
    commits.lines.last.chomp
  else
    commit
  end
end

puts "color legend: \e[36mgit clone\e[0m git bisect \e[1m\e[32mrubyfarm-bisect\e[0m \e[34mdocker\e[0m \e[31mtest script\e[0m"
puts
Dir.mktmpdir do |dir|
  Dir.chdir(dir) do
    print "\e[36m"
    system("git", "clone", git_url)
    puts "\e[0m"
    Dir.chdir("ruby") do
      good_commit = solve_rev[good_commit]
      bad_commit = solve_rev[bad_commit]

      if !system("git", "merge-base", "--is-ancestor", solve_rev[good_commit], solve_rev[bad_commit])
        puts "\e[1m\e[32m#{ good_commit } is not an ancestor of #{ bad_commit }.  Try to reverse.\e[0m"
        good_commit, bad_commit = bad_commit, good_commit
        if !system("git", "merge-base", "--is-ancestor", solve_rev[good_commit], solve_rev[bad_commit])
          puts "\e[1m\e[32m#{ good_commit } is not an ancestor of #{ bad_commit }.  Aborting.\e[0m"
          exit 1
        end
      end

      order = "normal"
      if auto
        system("git", "checkout", solve_rev[good_commit])
        if !system(CORE, *mounts, "--", *ARGV)
          puts "\e[1m\e[32mThe beginning commit #{ good_commit } doesn't pass the test.  Find the first good commit. \e[0m"
          order = "reversed"
        end
      end

      system("git", "bisect", "start", solve_rev[bad_commit], solve_rev[good_commit])
      env = { "RUBYFARM_BISECT_ORDER" => order }
      system(env, "git", "bisect", "run", CORE, *mounts, "--", *ARGV)
    end
  end
end
